package com.deathmotion.antihealthindicator.version

import org.gradle.api.DefaultTask
import org.gradle.api.file.Directory
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction

abstract class AHIVersionTask : DefaultTask() {

    companion object {
        const val TASK_NAME = "generateVersionsFile"
    }

    @get:Input
    abstract var packageName: String

    @get:Input
    abstract var version: String

    @get:OutputDirectory
    abstract var outputDir: Provider<Directory>

    @TaskAction
    fun generate() {
        val dir = outputDir.get().dir(packageName.replace('.', '/'))
        dir.asFile.mkdirs()

        val file = dir.file("AHIVersions.java").asFile
        if (!file.exists()) {
            file.createNewFile()
        }

        val ver = Version.fromString(version)
        logger.info("Generating AHIVersions.java with version $ver")

        file.writeText(
            """
            /**
             * This file is generated by the auto-version task. Modifying it will have no effect.
             */
            package $packageName;
            
            import com.deathmotion.antihealthindicator.api.versioning.AHIVersion;
            
            import java.time.Instant;
            
            public final class AHIVersions {
            
                public static final String RAW = "$version";
                public static final Instant BUILD_TIMESTAMP = Instant.ofEpochMilli(${System.currentTimeMillis()}L);
                public static final AHIVersion CURRENT = new AHIVersion(${ver.major}, ${ver.minor}, ${ver.patch}, ${ver.quotedSnapshotCommit()});
                public static final AHIVersion UNKNOWN = new AHIVersion(0, 0, 0);
                
                private AHIVersions() {
                    throw new IllegalStateException();
                }
            }
        """.trimIndent()
        )
    }

    private data class Version(
        val major: Int,
        val minor: Int,
        val patch: Int,
        val snapshotCommit: String?
    ) {
        companion object {
            private val REGEX = Regex("""(\d+)\.(\d+)\.(\d+)(?:\+([0-9a-f]+)-SNAPSHOT)?""")

            fun fromString(version: String): Version {
                val match = REGEX.matchEntire(version) ?: throw IllegalArgumentException("Invalid version: $version")
                return Version(
                    match.groupValues[1].toInt(),
                    match.groupValues[2].toInt(),
                    match.groupValues[3].toInt(),
                    match.groupValues[4].ifEmpty { null }
                )
            }
        }

        fun quotedSnapshotCommit(): String {
            if (snapshotCommit == null) {
                return "null"
            }
            return "\"$snapshotCommit\""
        }
    }

}
